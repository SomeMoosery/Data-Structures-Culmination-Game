
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;


public class Room {
	private	String	name; //name of the room
	private	String	description; //description of the room
	private	boolean	visibility; //whether the room is lit or dark
	private	boolean habitability; //whether the room is habitable
	private String	habitableMsg; //reason for room not being habitable (only relevant when habitability is false)
	private	Set<Item>	items; //items in the room
	private	List<MessageHandler> handlers; // message handlers
	private HashMap<Room, String> lockedPassages; //locked rooms and the reason for their being locked
	//Do not add anymore data members
	
	public Room(String name, String description, boolean visibility, boolean habitability,
			String habMsg, Set<Item> items, List<MessageHandler> handlers){
		this.name = name;
		this.description = description;
		this.visibility = visibility;
		this.habitability = habitability;
		this.habitableMsg = habMsg;
		this.items = items;
		this.handlers = handlers;
		lockedPassages = new HashMap<Room,String>();
	}
	
	/**
	 * Gives the name of the room 
	 * 
	 * @return - name of the room
	 */
	public String getName(){
    	return name;
	}
	
	/**
	 * Tells the user whether the room is lit or not 
	 * 
	 * @return - true if the room is lit, false if not
	 */
	public boolean isVisible(){
    	if (visibility == true) return true;
    	else return false;
	}
	
	/**
	 * Tells the user whether the room is habitable or not
	 * 
	 * @return - true if the room is habitable, false if not
	 */
	public boolean isHabitable(){
    	if (habitability == true) return true;
    	else return false;
	}
	
	/**
	 * Tells the user why the room is uninhabitable (if the room is in fact uninhabitable)
	 * 
	 * @return - the reason the room is uninhabitable if the room is uninhabitable 
	 */
	public String getHabitableMsg(){
    	if (this.isHabitable() == true) return null;
    	else return habitableMsg;
	}
	
	/**
	 * Gives the user the hashmap of locked passages in the room
	 * 
	 * @return - HashMap of locked passages
	 */
	public HashMap<Room, String> getLockedPassages(){
    	return lockedPassages;
	}
	
	/**
	 * Adds a (RoomName, ReasonWhyLocked) pair to the list of locked passages for the room
	 * @param passage - passage that is locked
	 * @param whyLocked - reason the given passage is locked
	 */
	public void addLockedPassage(Room passage, String whyLocked){
    	lockedPassages.put(passage, whyLocked);
	}
	
	/**
	 * If this method finds the requested item in the room, it'll give the item. Otherwise it'll return null
	 * @param item - item we are looking for
	 * @return - the Item we are looking for if found, null if it's not found
	 */
	public Item findItem(String item){
    	if (items.contains(item)){
    		Iterator<Item> itr = items.iterator();
    		while (itr.hasNext()){
    			Item curr = itr.next();
    			if(curr.getName().equals(item)) return curr;
    		}
    	}
    	return null;
	}
	
	/**
	 * Adds an item to the list of items in the room if the item is not already present
	 * @param item - item to be added 
	 * @return - true if the item was successfully added (i.e. no duplicates, false if not)
	 */
	public boolean addItem(Item item){
    	Iterator<Item> itr = items.iterator();
    	while (itr.hasNext()){
    		if (itr.next().equals(item)) return false;
    	}
    	items.add(item);
    	return true;
    	
	}
	
	/**
	 * Removes an item from the list of items in the room (if the item is in the room, of course)
	 * @param item - item to be removed
	 * @return - true if the item was successfully removed, false if not
	 */
	public boolean removeItem(Item item){
    	Iterator<Item> itr = items.iterator();
    	while(itr.hasNext()){
    		if (itr.next().equals(item)) items.remove(item);
    		return true;
    	}
    	return false;
	}

	/***
	 * Receives messages from items used by the player and executes the 
	 * appropriate action stored in a message handler
	 * @param message is the "message" sent by the item
	 * @return null, this Room or Unlocked Room depending on MessageHandler
	 */
	public Room receiveMessage(String message){
		Iterator<MessageHandler> itr = handlers.iterator();
		MessageHandler msg = null;
		while(itr.hasNext()){
			msg = itr.next();
			if(msg.getExpectedMessage().equalsIgnoreCase(message))
				break;
			msg = null;
		}
		if(msg == null)
			return null;
		switch(msg.getType()){
		case("visibility") :
			this.visibility = true;
			return this;
		case("habitability") :
			this.habitability = true;
			return this;
		case("room") :
			for(Room rm : this.lockedPassages.keySet()){
				if(rm.getName().equalsIgnoreCase(msg.getRoomName())){
					this.lockedPassages.remove(rm);
					return rm;
				}
			}
		default:
			return null;
		}
	}

	/**
	 * Returns a String consisting of the Rooms name, its description, its items and locked rooms.
	 * @return - string of everything in the room
	 */
	public String toString(){
		StringBuilder sb = new StringBuilder();
		sb.append("Welcome to the " + name + "!");
		sb.append(System.getProperty("line.separator"));
		if(!this.visibility){
			sb.append("Its too dark to see a thing!");
			sb.append(System.getProperty("line.separator"));
			sb.append("Places that can be reached from here :");
			sb.append(System.getProperty("line.separator"));
			for(Room rm :this.lockedPassages.keySet()){
				sb.append(rm.getName());
				sb.append(System.getProperty("line.separator"));
			}
			return sb.toString();
		}
		sb.append(description);
		sb.append(System.getProperty("line.separator"));
		if(this.items.size() >0){ 
			sb.append("Some things that stand out from the rest :");
			sb.append(System.getProperty("line.separator"));
		}
		Iterator<Item> itr = this.items.iterator();
		while(itr.hasNext()){
			sb.append(itr.next().getName());
			sb.append(System.getProperty("line.separator"));
		}
		sb.append("Places that can be reached from here :");
		sb.append(System.getProperty("line.separator"));
		for(Room rm :this.lockedPassages.keySet()){
			sb.append(rm.getName());
			sb.append(System.getProperty("line.separator"));
		}
		return sb.toString();
	}
}
