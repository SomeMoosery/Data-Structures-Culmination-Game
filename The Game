

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

public class TheGame {
	private static String gameIntro; // initial introduction to the game
	private static String winningMessage; //winning message of game
	private static String gameInfo; //additional game info
	private static boolean gameWon = false; //state of the game
	private static Scanner scanner = null; //for reading files
	private static Scanner ioscanner = null; //for reading standard input
	private static Player player; //object for player of the game
	private static Room location; //current room in which player is located
	private static Room winningRoom; //Room which player must reach to win
	private static Item winningItem; //Item which player must find
	private static DirectedGraph<Room> layout; //Graph structure of the Rooms
	private static String lines;
	private static List<Room> rooms;

	public static void main(String[] args) {
		if (args.length != 1) {
			System.err.println("Bad invocation! Correct usage: "
					+ "java AppStore <gameFile>");
			System.exit(1);
		}

		boolean didInitialize = initializeGame(args[0]);

		if (!didInitialize) {
			System.err.println("Failed to initialize the application!");
			System.exit(1);
		}

		System.out.println(gameIntro); // game intro

		processUserCommands();
	}

	private static boolean initializeGame(String gameFile) {
		
		try {
			// reads player name
			System.out.println("Welcome worthy squire! What might be your name?");
			ioscanner = new Scanner(System.in);
			String playerName = ioscanner.nextLine();
			
			File file = new File(gameFile);
			scanner = new Scanner(file);
			
			try{
				//First three lines of the input
				gameIntro = scanner.nextLine().trim();
				winningMessage = scanner.nextLine().trim();
				gameInfo = scanner.nextLine().trim();
				
				//Player's items:
				lines = scanner.nextLine().trim();
				if(lines.contains("#player items:")){
					lines = scanner.nextLine().trim();
					if (lines.contains("#item:")){
						Set<Item> playerItems = itemWorker();
						player = new Player(playerName, playerItems);
					}else return false;
				} else return false;
				
				//reads rooms
				rooms = roomWorker();
				
				//sets current location
				location = rooms.get(0);
				
				//initializes graph
				layout = new DirectedGraph<Room>();
				Iterator<Room> itr = rooms.iterator();
				while(itr.hasNext()){
					layout.addVertex(itr.next());
				}	
				
				//processes the rest of the file
				lockedPassagesWorker();
				adjacencyListWorker();
		} catch (Exception e){
			return false;
		}
			return true;
				
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return false;
		} catch (Exception e){
			e.printStackTrace();
			return false;
		}
	}
	
	/**
	 * Converts Strings to boolean types
	 */
	private static boolean StB(String s){
		if(s.equals("true")) return true;
		else if (s.equals("false")) return false;
		else throw new IllegalArgumentException();
	}
	
	/**
	 * Processes items when an item tag is present
	 */
	private static Set<Item> itemWorker(){
		boolean winner = false;
		Set<Item> returner = new HashSet<Item>();
		while(lines.contains("#item")){
			try{
				if (lines.contains("win")) winner = true;
				String name = scanner.nextLine().trim();
				String description = scanner.nextLine().trim();
				boolean activated = StB(scanner.nextLine().trim());
				String message = scanner.nextLine().trim();
				boolean oneTime = StB(scanner.nextLine().trim());
				String isUsed = scanner.nextLine().trim();
				
				if (winner){
					winningItem = new Item(name, description, activated, message, oneTime, isUsed);
					returner.add(winningItem);
					winner = false;
				}
				else{
					returner.add(new Item(name, description, activated, message, oneTime, isUsed));
				}
				lines = scanner.nextLine().trim();
			} catch (Exception e ) {
				throw new IllegalArgumentException();
			}
		}
		return returner;
	}
	
	/**
	 * Initializes graph's vertices. 
	 */
	private static List<Room> roomWorker(){
		ArrayList<Room> returner = new ArrayList<Room>();
		boolean winner = false; 
		while(lines.contains("#room")){
			try{
				if(lines.contains("#win")) winner = true;
				String name = scanner.nextLine().trim();
				String description = scanner.nextLine().trim();
				boolean visible = StB(scanner.nextLine().trim());
				boolean habitable = StB(scanner.nextLine().trim());
				String habMsg = ""; 
				if (!habitable) habMsg = scanner.nextLine().trim();
				
				lines = scanner.nextLine();
				Set<Item> itemsInRoom = itemWorker();
				
				List<MessageHandler> handlers = messageHandlerWorker(name);
				
				if (winner){
					winningRoom = new Room(name, description, visible, habitable, habMsg, itemsInRoom, handlers);
					returner.add(winningRoom);
					winner = false;
				}
				else{
					returner.add(new Room(name, description, visible, habitable, habMsg, itemsInRoom, handlers));
				}
			} catch (Exception e ){
				throw new IllegalArgumentException();
			}
		}
		return returner;
	}
	
	/**
	 * Creates a message handler for each room
	 */
	private static List<MessageHandler> messageHandlerWorker(String currRoom){
		String name = currRoom;
		ArrayList<MessageHandler> returner = new ArrayList<MessageHandler>();
		while(lines.contains("#messageHandler")){
			try{
				String message = scanner.nextLine().trim();
				String type = scanner.nextLine().trim();
				if(type.equals("room")){
					name = scanner.nextLine().trim();
				}
				returner.add(new MessageHandler(message, type, name));
				lines = scanner.nextLine().trim();
			} catch (Exception e ){
				throw new IllegalArgumentException();
			}
		}
		return returner;
	}
	
	/**
	 * Processes locked passages in the graph of rooms
	 */
	private static void lockedPassagesWorker(){
		if(lines.contains("#locked")){
			try{
				lines = scanner.nextLine().trim();
				while(!lines.contains("#")){
					String locked = lines;
					String whyLocked = scanner.nextLine().trim();
					String[] pairRooms = locked.split(" ");
					Room r1 = null;
					Room r2 = null; 
					
					Iterator<Room> itr = rooms.iterator();
					while(itr.hasNext()){
						Room curr = itr.next();
						if(curr.getName().equals(pairRooms[0])) r1 = curr;
						else if (curr.getName().equals(pairRooms[1])) r2 = curr; 
					}
					if (r1 == null || r2 == null) throw new IllegalArgumentException();
					
					r1.addLockedPassage(r2, whyLocked);
					lines = scanner.nextLine().trim();
				}
			} catch (Exception e ){
				throw new IllegalArgumentException();
			}
		} 
		else{
			System.out.println(lines);
			throw new IllegalArgumentException();
		}
	}
	
	/**
	 * Process the adjacency list
	 */
	private static void adjacencyListWorker(){
		if(lines.contains("#AdjacencyList")){
			while(scanner.hasNextLine()){
				lines = scanner.nextLine().trim();
				String[] adj = lines.split(" ");
				ArrayList<Room> edgeRooms = new ArrayList<Room>();
				Room curr = null;
				Iterator<Room> itr = rooms.iterator();
				
				while(itr.hasNext()){
					Room currRoom = itr.next();
					boolean beenAdded = false;
					for (int j = 0; j < adj.length && !beenAdded; j++){
						if (currRoom.getName().equals(adj[j])){
							if (j == 0){
								curr = currRoom;
								beenAdded = true;
							}
							else{
								edgeRooms.add(currRoom);
								beenAdded = true;
							}
						}
					}
				}
				itr = edgeRooms.iterator();
				while(itr.hasNext()){
					layout.addEdge(curr, itr.next());
				}
			}
		}
		else throw new IllegalArgumentException();
	}

	private static void processUserCommands() {
		String command = null;
		do {

			System.out.print("\nPlease Enter a command ([H]elp):");
			command = ioscanner.next();
			switch (command.toLowerCase()) {
			case "p": // pick up
				processPickUp(ioscanner.nextLine().trim());
				goalStateReached();
				break;
			case "d": // put down item
				processPutDown(ioscanner.nextLine().trim());
				break;
			case "u": // use item
				processUse(ioscanner.nextLine().trim());
				break;
			case "lr":// look around
				processLookAround();
				break;
			case "lt":// look at
				processLookAt(ioscanner.nextLine().trim());
				break;
			case "ls":// look at sack
				System.out.println(player.printSack());
				break;
			case "g":// goto room
				processGoTo(ioscanner.nextLine().trim());
				goalStateReached();
				break;
			case "q":
				System.out.println("You Quit! You, " + player.getName() + ", are a loser!!");
				break;
			case "i":
				System.out.println(gameInfo);
				break;
			case "h":
				System.out
						.println("\nCommands are indicated in [], and may be followed by \n"+
							"any additional information which may be needed, indicated within <>.\n"
								+ "\t[p]  pick up item: <item name>\n"
								+ "\t[d]  put down item: <item name>\n"
								+ "\t[u]  use item: <item name>\n"
								+ "\t[lr] look around\n"
								+ "\t[lt] look at item: <item name>\n"
								+ "\t[ls] look in your magic sack\n"
								+ "\t[g]  go to: <destination name>\n"
								+ "\t[q]  quit\n"
								+ "\t[i]  game info\n");
				break;
			default:
				System.out.println("Unrecognized Command!");
				break;
			}
		} while (!command.equalsIgnoreCase("q") && !gameWon);
		ioscanner.close();
	}

	private static void processLookAround() {
		System.out.print(location.toString());
		for(Room rm : layout.getNeighbors(location)){
			System.out.println(rm.getName());
		}
	}

	private static void processLookAt(String item) {
		Item itm = player.findItem(item);
		if(itm == null){
			itm = location.findItem(item);
		}
		if(itm == null){
			System.out.println(item + " not found");
		}
		else
			System.out.println(itm.toString());
	}

	private static void processPickUp(String item) {
		if(player.findItem(item) != null){
			System.out.println(item + " already in sack");
			return;
		}
		Item newItem = location.findItem(item);
		if(newItem == null){
			System.out.println("Could not find " + item);
			return;
		}
		player.addItem(newItem);
		location.removeItem(newItem);
		System.out.println("You picked up ");
		System.out.println(newItem.toString());
	}
	
	private static void processPutDown(String item) {
		if(player.findItem(item) == null){
			System.out.println(item + " not in sack");
			return;
		}
		Item newItem = player.findItem(item);
		location.addItem(newItem);
		player.removeItem(newItem);
		System.out.println("You put down " + item);
	}

	private static void processUse(String item) {
		Item newItem = player.findItem(item);
		if(newItem == null){
			System.out.println("Your magic sack doesn't have a " + item);
			return;
		}
		if (newItem.activated()) {
			System.out.println(item + " already in use");
			return;
		}
		if(notifyRoom(newItem)){
			if (newItem.isOneTimeUse()) {
				player.removeItem(newItem);
			}
		}
	}

	private static void processGoTo(String destination) {
		Room dest = findRoomInNeighbours(destination);
		if(dest == null) {
			for(Room rm : location.getLockedPassages().keySet()){
				if(rm.getName().equalsIgnoreCase(destination)){
					System.out.println(location.getLockedPassages().get(rm));
					return;
				}
			}
			System.out.println("Cannot go to " + destination + " from here");
			return;
		}
		Room prevLoc = location;
		location = dest;
		if(!player.getActiveItems().isEmpty())
			System.out.println("The following items are active:");
		for(Item itm:player.getActiveItems()){
			notifyRoom(itm);
		}
		if(!dest.isHabitable()){
			System.out.println("Thou shall not pass because");
			System.out.println(dest.getHabitableMsg());
			location = prevLoc;
			return;
		}
		
		System.out.println();
		processLookAround();
	}

	private static boolean notifyRoom(Item item) {
		Room toUnlock = location.receiveMessage(item.on_use());
		if (toUnlock == null) {
			if(!item.activated())
				System.out.println("The " + item.getName() + " cannot be used here");
			return false;
		} else if (toUnlock == location) {
			System.out.println(item.getName() + ": " + item.on_useString());
			item.activate();
		} else {
			// add edge from location to to Unlock
			layout.addEdge(location, toUnlock);
			if(!item.activated())
				System.out.println(item.on_useString());
			item.activate();
		}
		return true;
	}

	private static Room findRoomInNeighbours(String room) {
		Set<Room> neighbours = layout.getNeighbors(location);
		for(Room rm : neighbours){
			if(rm.getName().equalsIgnoreCase(room)){
				return rm;
			}
		}
		return null;
	}

	private static void goalStateReached() {
		if ((location == winningRoom && player.hasItem(winningItem)) 
				|| (location == winningRoom && winningItem == null)){
			System.out.println("Congratulations, " + player.getName() + "!");
			System.out.println(winningMessage);
			System.out.println(gameInfo);
			gameWon = true;
		}
	}

}
